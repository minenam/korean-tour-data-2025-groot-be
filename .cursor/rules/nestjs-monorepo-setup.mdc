# NestJS + TypeScript 모노레포 백엔드 서버 구조 및 도메인 규칙

이 레포지토리는 **NestJS**와 **TypeScript** 기반의 모노레포 백엔드 서버입니다. 하위 모듈(submodule) 구조를 사용하며, 패키지 관리는 **pnpm**, 테스트는 **Jest**로 통일합니다.

## 도메인 구조 및 책임

- **auth**: 로그인, 회원가입, 권한 관리
- **course**: 지역별 생태관광 코스, 지도, 필터별 검색, 코스별 탄소 발자국 데이터
- **carbon**: 나의 여행 탄소 발자국 계산, 비교, 메트릭 공식 적용
- **gamification**: 대시보드, 스탬프, SNS 공유, 칭호/뱃지, 친환경 미션 인증, 여행 코스 좋아요, 마이페이지
- **review**: 여행 코스 리뷰

각 도메인은 `/apps` 또는 `/packages` 하위에 NestJS 모듈로 분리하여 관리합니다.

## 예시 구조

```
/apps
  /auth
  /course
  /carbon
  /gamification
  /review
/packages
  /common
  /shared
```

- 공통 유틸, 인터페이스, 데코레이터 등은 `/packages/common` 또는 `/packages/shared`에 둡니다.

## 공통 규칙

- **NestJS**: 각 도메인은 NestJS 모듈로 작성, 의존성은 최소화
- **TypeScript**: 모든 소스 코드는 TypeScript로 작성
- **패키지 관리**: 반드시 `pnpm` 사용, `npm`/`yarn` 금지
- **테스트**: 모든 테스트는 `Jest`로 작성, 각 모듈별 테스트 디렉토리
- **공통 설정**: 루트에 `tsconfig.base.json`, `jest.config.base.js` 등 공통 설정 파일을 두고, 각 모듈에서 확장
- **스크립트**: 루트의 `package.json`에 공통 스크립트(`build`, `test`, `lint` 등) 정의, 하위 모듈에서 필요시 오버라이드

## 참고 파일

- [pnpm workspace 설정](mdc:pnpm-workspace.yaml)
- [NestJS 앱 예시](mdc:apps/auth/src/main.ts)
- [Jest 설정 예시](mdc:jest.config.base.js)
- [TypeScript 설정 예시](mdc:tsconfig.base.json)

---
